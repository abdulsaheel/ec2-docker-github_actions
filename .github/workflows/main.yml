name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Debug Docker Image Name and Tag
      run: |
        echo "Building Docker image with name: my-flask-app and tag: latest"

    - name: Build Docker image
      run: |
        docker build -t my-flask-app:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        docker push my-flask-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
    - name: Set up SSH
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key

    - name: Deploy Docker container to EC2
      env:
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << 'EOF'
          # Pull the latest Docker image
          docker pull my-flask-app:latest

          # Stop and remove any existing container
          if [ "$(docker ps -q -f name=flask-hello-world)" ]; then
            docker stop flask-hello-world
            docker rm flask-hello-world
          fi

          # Run the new Docker container
          docker run -d --name flask-hello-world -p 5000:5000 my-flask-app:latest
        EOF
