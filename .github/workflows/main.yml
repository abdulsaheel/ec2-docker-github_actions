name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests
      run: |
        pytest
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest .
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
    - name: Set up SSH
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
    - name: Deploy Docker container to EC2
      env:
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << EOF
          # Log in to Docker Hub
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          
          # Check for existing containers and remove them
          if docker ps -a --format '{{.Names}}' | grep -q '^my-flask-app$'; then
            echo "Stopping and removing existing container..."
            docker stop my-flask-app || true
            docker rm my-flask-app || true
          fi
          
          # Pull the latest Docker image
          echo "Pulling latest image..."
          sudo docker pull $DOCKER_USERNAME/my-flask-app:latest
          
          # Run the new Docker container
          echo "Starting new container..."
          sudo docker run -d --name my-flask-app -p 5000:5000 $DOCKER_USERNAME/my-flask-app:latest || echo "Failed to start the new container."
        EOF
