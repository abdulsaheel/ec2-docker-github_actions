name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest .

    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
    - name: Set up SSH
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key

    - name: Deploy Docker container to EC2
      env:
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << EOF
          # Log in to Docker Hub
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          
          CONTAINER_ID=$(sudo docker ps -q -f name=my-flask-app) && [ -n "$CONTAINER_ID" ] && sudo docker rm -f $CONTAINER_ID && echo "Found Docker already running, removed"

          # Stop and remove any existing container with the name my-flask-app
          existing_container_id=$(docker ps -aq -f name=my-flask-app)
          if [ -n "$existing_container_id" ]; then
            echo "Stopping existing container..."
            docker rm -f my-flask-app
            docker "$existing_container_id" || echo "Failed to stop the existing container."
            echo "Removing existing container..."
            docker rm my-flask-app || echo "Failed to remove the existing container."
          else
            echo "No existing container named my-flask-app found."
          fi
    
          # Optionally remove the old image (can be skipped if you prefer to keep old images)
          if [ "$(docker images -q $DOCKER_USERNAME/my-flask-app:latest)" ]; then
            echo "Removing old image..."
            docker rm -f my-flask-app
            docker rmi $DOCKER_USERNAME/my-flask-app:latest || echo "Failed to remove the old image."
          fi
          
          # Run the new Docker container
          echo "Starting new container..."

          # Pull the latest Docker image
          docker pull $DOCKER_USERNAME/my-flask-app:latest
          docker run -d --help --name my-flask-app -p 5000:5000 $DOCKER_USERNAME/my-flask-app:latest || echo "Failed to start the new container."
        EOF
